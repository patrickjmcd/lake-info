// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: lakeinfo/v1/lakeinfo.proto

package lakeinfov1

import (
	_ "github.com/patrickjmcd/lake-info/gen/tagger"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LakeInfoMeasurement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LakeName            string                 `protobuf:"bytes,1,opt,name=lake_name,json=lakeName,proto3" json:"lake_name,omitempty" bson:"lakeName"`
	Level               float64                `protobuf:"fixed64,2,opt,name=level,proto3" json:"level,omitempty" bson:"level"`
	Temperature         float64                `protobuf:"fixed64,3,opt,name=temperature,proto3" json:"temperature,omitempty" bson:"temperature"`
	Generation          float64                `protobuf:"fixed64,4,opt,name=generation,proto3" json:"generation,omitempty" bson:"generation"`
	TurbineReleaseRate  float64                `protobuf:"fixed64,5,opt,name=turbine_release_rate,json=turbineReleaseRate,proto3" json:"turbine_release_rate,omitempty" bson:"turbineReleaseRate"`
	SpillwayReleaseRate float64                `protobuf:"fixed64,6,opt,name=spillway_release_rate,json=spillwayReleaseRate,proto3" json:"spillway_release_rate,omitempty" bson:"spillwayReleaseRate"`
	TotalReleaseRate    float64                `protobuf:"fixed64,7,opt,name=total_release_rate,json=totalReleaseRate,proto3" json:"total_release_rate,omitempty" bson:"totalReleaseRate"`
	MeasuredAt          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=measured_at,json=measuredAt,proto3" json:"measured_at,omitempty" bson:"measuredAt"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"createdAt"`
}

func (x *LakeInfoMeasurement) Reset() {
	*x = LakeInfoMeasurement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LakeInfoMeasurement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LakeInfoMeasurement) ProtoMessage() {}

func (x *LakeInfoMeasurement) ProtoReflect() protoreflect.Message {
	mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LakeInfoMeasurement.ProtoReflect.Descriptor instead.
func (*LakeInfoMeasurement) Descriptor() ([]byte, []int) {
	return file_lakeinfo_v1_lakeinfo_proto_rawDescGZIP(), []int{0}
}

func (x *LakeInfoMeasurement) GetLakeName() string {
	if x != nil {
		return x.LakeName
	}
	return ""
}

func (x *LakeInfoMeasurement) GetLevel() float64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *LakeInfoMeasurement) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *LakeInfoMeasurement) GetGeneration() float64 {
	if x != nil {
		return x.Generation
	}
	return 0
}

func (x *LakeInfoMeasurement) GetTurbineReleaseRate() float64 {
	if x != nil {
		return x.TurbineReleaseRate
	}
	return 0
}

func (x *LakeInfoMeasurement) GetSpillwayReleaseRate() float64 {
	if x != nil {
		return x.SpillwayReleaseRate
	}
	return 0
}

func (x *LakeInfoMeasurement) GetTotalReleaseRate() float64 {
	if x != nil {
		return x.TotalReleaseRate
	}
	return 0
}

func (x *LakeInfoMeasurement) GetMeasuredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasuredAt
	}
	return nil
}

func (x *LakeInfoMeasurement) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetLakeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LakeName  string                 `protobuf:"bytes,1,opt,name=lake_name,json=lakeName,proto3" json:"lake_name,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Latest    bool                   `protobuf:"varint,4,opt,name=latest,proto3" json:"latest,omitempty"`
}

func (x *GetLakeInfoRequest) Reset() {
	*x = GetLakeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLakeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLakeInfoRequest) ProtoMessage() {}

func (x *GetLakeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLakeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetLakeInfoRequest) Descriptor() ([]byte, []int) {
	return file_lakeinfo_v1_lakeinfo_proto_rawDescGZIP(), []int{1}
}

func (x *GetLakeInfoRequest) GetLakeName() string {
	if x != nil {
		return x.LakeName
	}
	return ""
}

func (x *GetLakeInfoRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetLakeInfoRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetLakeInfoRequest) GetLatest() bool {
	if x != nil {
		return x.Latest
	}
	return false
}

type GetLakeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*LakeInfoMeasurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *GetLakeInfoResponse) Reset() {
	*x = GetLakeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLakeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLakeInfoResponse) ProtoMessage() {}

func (x *GetLakeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLakeInfoResponse.ProtoReflect.Descriptor instead.
func (*GetLakeInfoResponse) Descriptor() ([]byte, []int) {
	return file_lakeinfo_v1_lakeinfo_proto_rawDescGZIP(), []int{2}
}

func (x *GetLakeInfoResponse) GetMeasurements() []*LakeInfoMeasurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type StoreLakeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measurements []*LakeInfoMeasurement `protobuf:"bytes,1,rep,name=measurements,proto3" json:"measurements,omitempty"`
}

func (x *StoreLakeInfoRequest) Reset() {
	*x = StoreLakeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreLakeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreLakeInfoRequest) ProtoMessage() {}

func (x *StoreLakeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreLakeInfoRequest.ProtoReflect.Descriptor instead.
func (*StoreLakeInfoRequest) Descriptor() ([]byte, []int) {
	return file_lakeinfo_v1_lakeinfo_proto_rawDescGZIP(), []int{3}
}

func (x *StoreLakeInfoRequest) GetMeasurements() []*LakeInfoMeasurement {
	if x != nil {
		return x.Measurements
	}
	return nil
}

type StoreLakeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StoreLakeInfoResponse) Reset() {
	*x = StoreLakeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreLakeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreLakeInfoResponse) ProtoMessage() {}

func (x *StoreLakeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_lakeinfo_v1_lakeinfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreLakeInfoResponse.ProtoReflect.Descriptor instead.
func (*StoreLakeInfoResponse) Descriptor() ([]byte, []int) {
	return file_lakeinfo_v1_lakeinfo_proto_rawDescGZIP(), []int{4}
}

var File_lakeinfo_v1_lakeinfo_proto protoreflect.FileDescriptor

var file_lakeinfo_v1_lakeinfo_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6c, 0x61, 0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61,
	0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6c, 0x61,
	0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x74, 0x61, 0x67, 0x67,
	0x65, 0x72, 0x2f, 0x74, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfe, 0x04, 0x0a, 0x13, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x61, 0x6b, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x9a, 0x84, 0x9e, 0x03,
	0x0f, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x61, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x52, 0x08, 0x6c, 0x61, 0x6b, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x11, 0x9a, 0x84, 0x9e, 0x03, 0x0c,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x17, 0x9a, 0x84, 0x9e, 0x03, 0x12, 0x62,
	0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x36,
	0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03, 0x11, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x14, 0x74, 0x75, 0x72, 0x62, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x1e, 0x9a, 0x84, 0x9e, 0x03, 0x19, 0x62, 0x73, 0x6f, 0x6e, 0x3a,
	0x22, 0x74, 0x75, 0x72, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x52, 0x12, 0x74, 0x75, 0x72, 0x62, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x15, 0x73, 0x70, 0x69, 0x6c,
	0x6c, 0x77, 0x61, 0x79, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0x9a, 0x84, 0x9e, 0x03, 0x1a, 0x62, 0x73,
	0x6f, 0x6e, 0x3a, 0x22, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x77, 0x61, 0x79, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x52, 0x13, 0x73, 0x70, 0x69, 0x6c, 0x6c, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1c, 0x9a, 0x84, 0x9e, 0x03, 0x17,
	0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x16, 0x9a, 0x84, 0x9e, 0x03,
	0x11, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x50,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x15,
	0x9a, 0x84, 0x9e, 0x03, 0x10, 0x62, 0x73, 0x6f, 0x6e, 0x3a, 0x22, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xbb, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6b, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6b, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x22, 0x5b,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x61,
	0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x61, 0x6b, 0x65,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xbf, 0x01, 0x0a, 0x0f, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6b,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x6c, 0x61, 0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x61, 0x6b, 0x65, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x2e, 0x6c, 0x61,
	0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4c,
	0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6c, 0x61, 0x6b, 0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x4c, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x70, 0x61, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6a, 0x6d, 0x63, 0x64, 0x2f, 0x6c,
	0x61, 0x6b, 0x65, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x6c, 0x61, 0x6b,
	0x65, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x6c, 0x61, 0x6b, 0x65, 0x69, 0x6e, 0x66,
	0x6f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lakeinfo_v1_lakeinfo_proto_rawDescOnce sync.Once
	file_lakeinfo_v1_lakeinfo_proto_rawDescData = file_lakeinfo_v1_lakeinfo_proto_rawDesc
)

func file_lakeinfo_v1_lakeinfo_proto_rawDescGZIP() []byte {
	file_lakeinfo_v1_lakeinfo_proto_rawDescOnce.Do(func() {
		file_lakeinfo_v1_lakeinfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_lakeinfo_v1_lakeinfo_proto_rawDescData)
	})
	return file_lakeinfo_v1_lakeinfo_proto_rawDescData
}

var file_lakeinfo_v1_lakeinfo_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_lakeinfo_v1_lakeinfo_proto_goTypes = []interface{}{
	(*LakeInfoMeasurement)(nil),   // 0: lakeinfo.v1.LakeInfoMeasurement
	(*GetLakeInfoRequest)(nil),    // 1: lakeinfo.v1.GetLakeInfoRequest
	(*GetLakeInfoResponse)(nil),   // 2: lakeinfo.v1.GetLakeInfoResponse
	(*StoreLakeInfoRequest)(nil),  // 3: lakeinfo.v1.StoreLakeInfoRequest
	(*StoreLakeInfoResponse)(nil), // 4: lakeinfo.v1.StoreLakeInfoResponse
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_lakeinfo_v1_lakeinfo_proto_depIdxs = []int32{
	5, // 0: lakeinfo.v1.LakeInfoMeasurement.measured_at:type_name -> google.protobuf.Timestamp
	5, // 1: lakeinfo.v1.LakeInfoMeasurement.created_at:type_name -> google.protobuf.Timestamp
	5, // 2: lakeinfo.v1.GetLakeInfoRequest.start_time:type_name -> google.protobuf.Timestamp
	5, // 3: lakeinfo.v1.GetLakeInfoRequest.end_time:type_name -> google.protobuf.Timestamp
	0, // 4: lakeinfo.v1.GetLakeInfoResponse.measurements:type_name -> lakeinfo.v1.LakeInfoMeasurement
	0, // 5: lakeinfo.v1.StoreLakeInfoRequest.measurements:type_name -> lakeinfo.v1.LakeInfoMeasurement
	1, // 6: lakeinfo.v1.LakeInfoService.GetLakeInfo:input_type -> lakeinfo.v1.GetLakeInfoRequest
	3, // 7: lakeinfo.v1.LakeInfoService.StoreLakeInfo:input_type -> lakeinfo.v1.StoreLakeInfoRequest
	2, // 8: lakeinfo.v1.LakeInfoService.GetLakeInfo:output_type -> lakeinfo.v1.GetLakeInfoResponse
	4, // 9: lakeinfo.v1.LakeInfoService.StoreLakeInfo:output_type -> lakeinfo.v1.StoreLakeInfoResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_lakeinfo_v1_lakeinfo_proto_init() }
func file_lakeinfo_v1_lakeinfo_proto_init() {
	if File_lakeinfo_v1_lakeinfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lakeinfo_v1_lakeinfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LakeInfoMeasurement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lakeinfo_v1_lakeinfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLakeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lakeinfo_v1_lakeinfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLakeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lakeinfo_v1_lakeinfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreLakeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lakeinfo_v1_lakeinfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreLakeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lakeinfo_v1_lakeinfo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lakeinfo_v1_lakeinfo_proto_goTypes,
		DependencyIndexes: file_lakeinfo_v1_lakeinfo_proto_depIdxs,
		MessageInfos:      file_lakeinfo_v1_lakeinfo_proto_msgTypes,
	}.Build()
	File_lakeinfo_v1_lakeinfo_proto = out.File
	file_lakeinfo_v1_lakeinfo_proto_rawDesc = nil
	file_lakeinfo_v1_lakeinfo_proto_goTypes = nil
	file_lakeinfo_v1_lakeinfo_proto_depIdxs = nil
}
