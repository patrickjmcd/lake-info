// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: lakeinfo/v1/lakeinfo.proto

package lakeinfov1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/patrickjmcd/lake-info/gen/lakeinfo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LakeInfoServiceName is the fully-qualified name of the LakeInfoService service.
	LakeInfoServiceName = "lakeinfo.v1.LakeInfoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LakeInfoServiceGetLakeInfoProcedure is the fully-qualified name of the LakeInfoService's
	// GetLakeInfo RPC.
	LakeInfoServiceGetLakeInfoProcedure = "/lakeinfo.v1.LakeInfoService/GetLakeInfo"
	// LakeInfoServiceStoreLakeInfoProcedure is the fully-qualified name of the LakeInfoService's
	// StoreLakeInfo RPC.
	LakeInfoServiceStoreLakeInfoProcedure = "/lakeinfo.v1.LakeInfoService/StoreLakeInfo"
)

// LakeInfoServiceClient is a client for the lakeinfo.v1.LakeInfoService service.
type LakeInfoServiceClient interface {
	GetLakeInfo(context.Context, *connect_go.Request[v1.GetLakeInfoRequest]) (*connect_go.Response[v1.GetLakeInfoResponse], error)
	StoreLakeInfo(context.Context, *connect_go.Request[v1.StoreLakeInfoRequest]) (*connect_go.Response[v1.StoreLakeInfoResponse], error)
}

// NewLakeInfoServiceClient constructs a client for the lakeinfo.v1.LakeInfoService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLakeInfoServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LakeInfoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &lakeInfoServiceClient{
		getLakeInfo: connect_go.NewClient[v1.GetLakeInfoRequest, v1.GetLakeInfoResponse](
			httpClient,
			baseURL+LakeInfoServiceGetLakeInfoProcedure,
			opts...,
		),
		storeLakeInfo: connect_go.NewClient[v1.StoreLakeInfoRequest, v1.StoreLakeInfoResponse](
			httpClient,
			baseURL+LakeInfoServiceStoreLakeInfoProcedure,
			opts...,
		),
	}
}

// lakeInfoServiceClient implements LakeInfoServiceClient.
type lakeInfoServiceClient struct {
	getLakeInfo   *connect_go.Client[v1.GetLakeInfoRequest, v1.GetLakeInfoResponse]
	storeLakeInfo *connect_go.Client[v1.StoreLakeInfoRequest, v1.StoreLakeInfoResponse]
}

// GetLakeInfo calls lakeinfo.v1.LakeInfoService.GetLakeInfo.
func (c *lakeInfoServiceClient) GetLakeInfo(ctx context.Context, req *connect_go.Request[v1.GetLakeInfoRequest]) (*connect_go.Response[v1.GetLakeInfoResponse], error) {
	return c.getLakeInfo.CallUnary(ctx, req)
}

// StoreLakeInfo calls lakeinfo.v1.LakeInfoService.StoreLakeInfo.
func (c *lakeInfoServiceClient) StoreLakeInfo(ctx context.Context, req *connect_go.Request[v1.StoreLakeInfoRequest]) (*connect_go.Response[v1.StoreLakeInfoResponse], error) {
	return c.storeLakeInfo.CallUnary(ctx, req)
}

// LakeInfoServiceHandler is an implementation of the lakeinfo.v1.LakeInfoService service.
type LakeInfoServiceHandler interface {
	GetLakeInfo(context.Context, *connect_go.Request[v1.GetLakeInfoRequest]) (*connect_go.Response[v1.GetLakeInfoResponse], error)
	StoreLakeInfo(context.Context, *connect_go.Request[v1.StoreLakeInfoRequest]) (*connect_go.Response[v1.StoreLakeInfoResponse], error)
}

// NewLakeInfoServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLakeInfoServiceHandler(svc LakeInfoServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	lakeInfoServiceGetLakeInfoHandler := connect_go.NewUnaryHandler(
		LakeInfoServiceGetLakeInfoProcedure,
		svc.GetLakeInfo,
		opts...,
	)
	lakeInfoServiceStoreLakeInfoHandler := connect_go.NewUnaryHandler(
		LakeInfoServiceStoreLakeInfoProcedure,
		svc.StoreLakeInfo,
		opts...,
	)
	return "/lakeinfo.v1.LakeInfoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LakeInfoServiceGetLakeInfoProcedure:
			lakeInfoServiceGetLakeInfoHandler.ServeHTTP(w, r)
		case LakeInfoServiceStoreLakeInfoProcedure:
			lakeInfoServiceStoreLakeInfoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLakeInfoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLakeInfoServiceHandler struct{}

func (UnimplementedLakeInfoServiceHandler) GetLakeInfo(context.Context, *connect_go.Request[v1.GetLakeInfoRequest]) (*connect_go.Response[v1.GetLakeInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lakeinfo.v1.LakeInfoService.GetLakeInfo is not implemented"))
}

func (UnimplementedLakeInfoServiceHandler) StoreLakeInfo(context.Context, *connect_go.Request[v1.StoreLakeInfoRequest]) (*connect_go.Response[v1.StoreLakeInfoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lakeinfo.v1.LakeInfoService.StoreLakeInfo is not implemented"))
}
